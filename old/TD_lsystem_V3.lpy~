from openalea.plantgl.all import *
from openalea.mtg import *
from openalea.mtg.io import mtg2axialtree
from scipy import cos, sin, sqrt, arccos, arcsin, degrees

initialmtg = MTG(r'D:\Documents\Lusignan\Modeles\luzerne.mtg')

scaling_Lmax = 1
inclination_factor = 1

def compute_length_orientation(mtg):
  length = {}
  inclination = {}
  azimut = {}
  for vtx in mtg:
    if mtg.label(vtx) in ('L1', 'F1', 'E1'): 
      basal_position_vtx = vtx-1
    elif mtg.label(vtx) and mtg.label(vtx)[0] == 'E':
      basal_position_vtx = mtg.parent(vtx)
    else:
      continue
    distal_position = [mtg.get_vertex_property(vtx)['XX'], mtg.get_vertex_property(vtx)['YY'], mtg.get_vertex_property(vtx)['ZZ']]
    basal_position = [mtg.get_vertex_property(basal_position_vtx)['XX'], mtg.get_vertex_property(basal_position_vtx)['YY'], mtg.get_vertex_property(basal_position_vtx)['ZZ']]
    # Length
    curr_length = sqrt((basal_position[0] - distal_position[0])**2 + (basal_position[1] - distal_position[1])**2 + (basal_position[2] - distal_position[2])**2)
    length[vtx] = curr_length
    # Orientation
    curr_inclination = abs(arcsin((distal_position[2] - basal_position[2]) / curr_length))
    x_projection = distal_position[0] - basal_position[0]
    curr_azimut = abs(arccos(x_projection / (curr_length * cos(curr_inclination))))
    inclination[vtx] = degrees(curr_inclination)
    azimut[vtx] = degrees(curr_azimut)
    
  return length, inclination, azimut

def larg_norm(L):
    if L<0.996:  
        return -12.268*L**4 + 22.958*L**3 -16.929*L**2 +6.2135*L #leaf Trudeau
    else:
        return 0

def larg(L, Lmax, largmax):
    return larg_norm(L/Lmax)*largmax

def mesh_leaflet(Lmax, largmax, alpha=0., n=8):
    #liste de pts
    ls_pt = [Vector3(0.,0.,0.)]
    for i in range(1, n):
        Lrel = float(i)/float(n)
        l = larg(Lrel, Lmax, largmax)
        ls_pt.append(Vector3(-l/2.*cos(alpha), Lrel*Lmax, l/2.*sin(alpha)))
        ls_pt.append(Vector3(0., Lrel*Lmax, 0.))
        ls_pt.append(Vector3(l/2*cos(alpha), Lrel*Lmax, l/2*sin(alpha)))
    ls_pt.append(Vector3(0., Lmax, 0.))

    #liste d'index
    ls_ind = [Index3(0,1,2), Index3(0,2,3)]
    for i in range(1, n):
        if i< n-1:
            ls_ind.append(Index3(i*3-2, (i+1)*3-2, (i+1)*3-1))
            ls_ind.append(Index3(i*3-1, i*3-2, (i+1)*3-1))
            ls_ind.append(Index3(i*3, i*3-1, (i+1)*3-1))
            ls_ind.append(Index3(i*3, (i+1)*3-1, (i+1)*3))
        elif i == n-1:
            ls_ind.append(Index3(i*3-1, i*3-2, i*3+1))
            ls_ind.append(Index3(i*3, i*3-1, i*3+1))

    return TriangleSet(Point3Array(ls_pt),Index3Array(ls_ind))

def mtg2lstring(mtg):
    # define the parameter names
    # define the name of modules to import and their parameters  
    moduldef = { 'E': ['length', 'inclination', 'azimut'], 'L' : ['length', 'inclination', 'azimut'], 'F' : ['length', 'inclination', 'azimut']}
    lstring = mtg2axialtree(mtg, moduldef)
    return lstring
    
Axiom:
  #print initialmtg.display()
  length, inclination, azimut = compute_length_orientation(initialmtg)
  initialmtg.properties()['length'] = length
  initialmtg.properties()['inclination'] = inclination
  initialmtg.properties()['azimut'] = azimut
#  PlantFrame(initialmtg, scale = 4)
  lstring = mtg2lstring(initialmtg)
  nsproduce(lstring)

production:

interpretation:
E(length, inclination, azimut):
  produce ;(7) EulerAngles(azimut,inclination,0) F(length);
L(length, inclination, azimut):
  lf, la, pe, br, crois = 21./21., 6.5/21., 17./21., 3.6/21., 10./21. #leaf Trudeau
  alpha = 3.14/8 #degre
  leaf = mesh_leaflet(lf, la, alpha, 10)
  inclination *= inclination_factor
  produce ;(7) EulerAngles(azimut+90, 90, 0) +(inclination) @g(leaf, length*scaling_Lmax) EulerAngles(azimut, 90, 0) +(inclination) @g(leaf, length*scaling_Lmax) EulerAngles(azimut+180, 90, 0) +(inclination) @g(leaf, length*scaling_Lmax)
F(length, inclination, azimut):
  produce ;(7) EulerAngles(azimut,inclination,0) F(length)
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_7 = pgl.Material("Color_7" , ambient = (44,195,48) , diffuse = 0.820513 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
